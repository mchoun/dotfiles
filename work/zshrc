# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

if [[ ! $(tmux list-sessions) ]]; then 
  tmux
fi

# Path to your oh-my-zsh installation.
export ZSH="$HOME/.oh-my-zsh"

ZSH_THEME="powerlevel10k/powerlevel10k"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# nvm specific config to help speed up start up time
zstyle ':omz:plugins:nvm' lazy yes
zstyle ':omz:plugins:nvm' autoload yes


plugins=(
  git
  fzf-tab
  zsh-autosuggestions
  zsh-syntax-highlighting
  aliases
  nvm
  )

source $ZSH/oh-my-zsh.sh

#config editing
alias sc="source ~/.zshrc"
alias ec="nvim ~/.zshrc"
alias et="nvim ~/.tmux.conf"

#npm aliases
alias nrdb='npm run debug'
alias nrd='npm run dev'
alias nrt='npm run test'
alias ns='npm start'
alias nr='npm run'

#nvm aliases
alias nvv='nvm -v'

#terminal aliases
alias ag='ag --path-to-ignore ~/.ignore'
alias lg='lazygit'
alias man='batman'
alias batp='bat package.json'
alias batr='bat README.md'
alias tree='tree -I node_modules'

#tmux aliases
alias tmuxa='tmux attach'
alias mux='tmuxinator'
alias msd='tmuxinator start dotfiles'
alias ms5='tmuxinator start v5-dev'
alias ms6='tmuxinator start v6-dev'

#nvim alias
alias nvim-kickstart='NVIM_APPNAME="nvim-kickstart" nvim'
alias nvk="nvim-kickstart"
alias nv="nvim"

# ls aliases
alias l='eza --oneline --group-directories-first -all -h --no-user'
alias fda='fd -H -I'

# git aliases
alias gcoo='git checkout -'
alias gmod='git merge origin/$(git_develop_branch)'
alias gddh='git diff develop...HEAD'
alias gddhf='git diff develop...HEAD --'
gbclean() {
  echo "Removing branches that have been merged with develop"
  git branch -d $(git branch --merged=develop | grep -v develop)
  echo "Fetching remote branches and deleting local remote branches that no longer exist"
  git fetch --prune
}

cdl() {cd "$1" && l}

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


#used to enter yazi and then change directory to the cwd when quit using q
function yy() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

# -- Use fd instead of fzf --

export FZF_DEFAULT_COMMAND="fd --hidden --strip-cwd-prefix --exclude .git"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd --type=d --hidden --strip-cwd-prefix --exclude .git"

# Use fd (https://github.com/sharkdp/fd) for listing path candidates.
# - The first argument to the function ($1) is the base path to start traversal
# - See the source code (completion.{bash,zsh}) for the details.
_fzf_compgen_path() {
  fd --hidden --exclude .git . "$1"
}

# Use fd to generate the list for directory completion
_fzf_compgen_dir() {
  fd --type=d --hidden --exclude .git . "$1"
}

_fzf_complete_git_add() {
  _fzf_complete --multi --reverse --prompt="commit " -- "$@" < <(
  git status -s
)
}

# tmux sesh function

function T() {
  {
    exec </dev/tty
    exec <&1
    local session
    session=$(sesh list -t -c | fzf --height 40% --reverse --border-label ' sesh ' --border --prompt 'âš¡  ')
    zle reset-prompt > /dev/null 2>&1 || true
    [[ -z "$session" ]] && return
    sesh connect $session
  }
}

export EDITOR=nvim

# Set up fzf key bindings and fuzzy completion
eval "$(fzf --zsh)"
eval "$(zoxide init zsh --cmd cd)"
# fzf with git using ctrl commands
source ~/fzf-git.sh/fzf-git.sh

# source paypal specific env variables
if [[ -f "$HOME/.zshpaypalenv" ]]; then
  echo "Sourcing PayPal ENV Exports"
  source "$HOME/.zshpaypalenv" 
fi

# set vi keys instead of emacs for command lines
 set -o vi

# Configuration for Python, PIP, OpenSSL to trust the PayPal Proxy Certificates
export REQUESTS_CA_BUNDLE='/usr/local/etc/openssl/certs/combined_cacerts.pem'
export SSL_CERT_FILE='/usr/local/etc/openssl/certs/combined_cacerts.pem'
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"
export NVM_NODEJS_ORG_MIRROR='https://artifactory.paypalcorp.com/artifactory/nodejs-dist'
export NODEJS_ORG_MIRROR='https://artifactory.paypalcorp.com/artifactory/nodejs-dist'
